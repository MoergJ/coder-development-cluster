---
- name: namespace
  k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: "present"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ namespace }}"

- name: query db password
  shell: "kubectl --kubeconfig {{ kubeconfig }} -n postgres
    get secret {{ coder_pg_user }}.main-postgres-db.credentials.postgresql.acid.zalan.do
    -o 'jsonpath={.data.password}' | base64 -d"
  register: "coder_pg_password"

- name: db url secret
  k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: "{{ component_state }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: coder-db-url
        namespace: "{{ namespace }}"
      type: Opaque
      stringData:
        db_url: "postgres://coder:{{ coder_pg_password.stdout }}@{{ coder_db_hostname }}:5432/coder?sslmode=disable"

- name: google secret
  when: google_credentials_path is defined
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ namespace }}"
    state: "{{ component_state }}"
    definition: "{{ lookup('template', 'google_secret.yml.j2') | from_yaml }}"

- name: storage class
  when: infrastructure_provider == "google"
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ namespace }}"
    state: "{{ component_state }}"
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: immediate-rwo
      allowVolumeExpansion: true
      allowedTopologies: []
      mountOptions: []
      parameters:
        type: pd-balanced
      provisioner: pd.csi.storage.gke.io
      reclaimPolicy: Delete
      volumeBindingMode: Immediate

- name: helm
  kubernetes.core.helm:
    kubeconfig: "{{ kubeconfig }}"
    name: coder
    namespace: "{{ namespace }}"
    chart_ref: "{{ role_path }}/helm"
    state: "{{ component_state }}"
    wait: true
    values: "{{ lookup('template', 'values.yml.j2') | from_yaml }}"
  register: helm_result

- name: coder additional deployments
  k8s:
    namespace: "{{ namespace }}"
    kubeconfig: "{{ kubeconfig }}"
    state: "{{ component_state }}"
    definition: "{{ lookup('template', 'coder.yml.j2') | from_yaml_all }}"

- name: wait
  when:
    - helm_result.changed
    - component_state == "present"
  wait_for:
    port: 443
    host: "{{ coder_access_host }}"
    timeout: 90
    delay: 10
    sleep: 3

- name: developer cluster role
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ namespace }}"
    state: "{{ component_state }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: coder-developer
      rules:
      - apiGroups:
        - ""
        resources:
        - "nodes"
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - "metrics.k8s.io"
        resources:
        - "*"
        verbs:
        - "*"
      - apiGroups:
        - "rbac.authorization.k8s.io"
        resources:
        - "*"
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - "rbac.authorization.k8s.io"
        resources:
        - "Role"
        - "RoleBinding"
        verbs:
        - "*"
      - apiGroups:
        - "acid.zalan.do"
        resources:
        - "*"
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - "monitoring.coreos.com"
        resources:
        - "*"
        verbs:
        - "*"
      - apiGroups:
        - certificates.k8s.io
        resources:
        - certificatesigningrequests
        verbs:
        - create
        - get
        - list
        - watch
        - delete
      - apiGroups:
        - ""
        attributeRestrictions: null
        resources:
        - users
        verbs:
        - impersonate
      - apiGroups:
          - ""
        resources:
          - persistentvolumes
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - "storage.k8s.io"
        resources:
          - storageclasses
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - "networking.k8s.io"
        resources:
          - ingressclasses
        verbs:
          - get
          - list
          - watch

- name: developer cluster role binding
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ namespace }}"
    state: "{{ component_state }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: coder-developer
      subjects:
        - kind: Group
          name: coder-developer
          apiGroup: rbac.authorization.k8s.io
      roleRef:
        kind: ClusterRole
        name: coder-developer
        apiGroup: rbac.authorization.k8s.io

- name: developer cluster view role binding
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ namespace }}"
    state: "{{ component_state }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: coder-developer-cluster-view
      subjects:
        - kind: Group
          name: coder-developer
          apiGroup: rbac.authorization.k8s.io
      roleRef:
        kind: ClusterRole
        name: view
        apiGroup: rbac.authorization.k8s.io

- name: alert manager config secret
  k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: "{{ component_state }}"
    namespace: "{{ namespace }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: alertmanager-config-secret
      type: Opaque
      stringData:
        email-auth-password: "{{ smtp.password }}"

- name: setup
  when: component_state == "present"
  include_tasks: setup.yml

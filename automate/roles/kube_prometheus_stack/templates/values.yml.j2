---

fullnameOverride: {{ prometheus_stack_release_name }}

alertmanager:
  enabled: true

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx-public
      nginx.ingress.kubernetes.io/auth-signin: "https://auth.{{ cluster_public_domain }}/oauth2/start"
      nginx.ingress.kubernetes.io/auth-url: "http://main-oauth2-proxy.oauth2-proxy.svc.cluster.local/oauth2/auth"
    hosts:
      - alert.{{ cluster_public_domain }}

    paths:
      - /

    pathType: Prefix

    tls:
      - hosts:
          - alert.{{ cluster_public_domain }}

  config:
    global:
      resolve_timeout: 5m
      http_config:
        follow_redirects: true
      smtp_hello: localhost
      smtp_require_tls: true
    route:
      receiver: "null"
      group_by:
      - namespace
      continue: false
      routes:
      - receiver: "null"
        matchers:
        - alertname=~"InfoInhibitor|Watchdog"
        continue: false
      - receiver: email
        continue: true
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
    inhibit_rules:
    - source_matchers:
      - severity="critical"
      target_matchers:
      - severity=~"warning|info"
      equal:
      - namespace
      - alertname
    - source_matchers:
      - severity="warning"
      target_matchers:
      - severity="info"
      equal:
      - namespace
      - alertname
    - source_matchers:
      - alertname="InfoInhibitor"
      target_matchers:
      - severity="info"
      equal:
      - namespace
    receivers:
    - name: "null"
    - name: email
      email_configs:
        - to: "{{ coder_admin_email }}"
          from: "{{ smtp.from }}"
          smarthost: "{{ smtp.host }}:{{ smtp.port }}"
          auth_username: "{{ smtp.user }}"
          auth_password: "{{ smtp.password }}"
          send_resolved: true
    templates:
    - /etc/alertmanager/config/*.tmpl

grafana:
  adminPassword: "{{ grafana_password }}"
  defaultDashboardsTimezone: "europe/berlin"
  sidecar:
    dashboards:
      searchNamespace: [ "ALL" ]

  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 250Mi

  grafana.ini:
    server:
      root_url: https://grafana.{{ cluster_public_domain }}
    auth.generic_oauth:
      enabled: true
      name: {{ keycloak_realm_name }}
      allow_sign_up: true
      # scopes: profile,email,groups
      scopes: profile,email,openid
      client_id: grafana
      client_secret: {{ grafana_client_secret }}
      auth_url: https://keycloak.{{ cluster_public_domain }}/realms/{{ keycloak_realm_name }}/protocol/openid-connect/auth
      token_url: https://keycloak.{{ cluster_public_domain }}/realms/{{ keycloak_realm_name }}/protocol/openid-connect/token
      api_url: https://keycloak.{{ cluster_public_domain }}/realms/{{ keycloak_realm_name }}/protocol/openid-connect/userinfo
      role_attribute_path: contains(groups[*], 'grafana-admin') && 'Admin' || contains(groups[*], 'grafana-dev') && 'Editor' || 'Admin'

  ingress:
    enabled: true

    annotations:
      nginx.org/websocket-services: {{ prometheus_stack_release_name }}-grafana
      kubernetes.io/ingress.class: nginx-public

    hosts:
      - grafana.{{ cluster_public_domain }}

    paths:
      - /

    tls:
      - hosts:
          - grafana.{{ cluster_public_domain }}

prometheusOperator:
  resources:
    limits:
      memory: 500Mi
    requests:
      cpu: 25m
      memory: 100Mi

prometheus:

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx-public
      nginx.ingress.kubernetes.io/auth-signin: "https://auth.{{ cluster_public_domain }}/oauth2/start"
      nginx.ingress.kubernetes.io/auth-url: "http://main-oauth2-proxy.oauth2-proxy.svc.cluster.local/oauth2/auth"
    hosts:
      - prometheus.{{ cluster_public_domain }}

    paths:
      - /

    pathType: Prefix

    tls:
      - hosts:
          - prometheus.{{ cluster_public_domain }}

  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    resources:
      limits:
        memory: 2000Mi
      requests:
        cpu: 100m
        memory: 1000Mi

    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi

coreDns:
  enabled: false

kubeProxy:
  enabled: false

kubeScheduler:
  enabled: false

kubeControllerManager:
  enabled: false

kubeEtcd:
  enabled: false

---
- name: "namespace"
  kubernetes.core.k8s:
    state: "present"
    kubeconfig: "{{ kubeconfig }}"
    definition:
      apiVersion: "v1"
      kind: "namespace"
      metadata:
        name: "{{ pg_namespace }}"

- name: "query if the postgres cluster already exists"
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ pg_namespace }}"
    api_version: "acid.zalan.do/v1"
    kind: "postgresql"
    name: "{{ pg_team_id }}-{{ pg_instance_name }}"
  register: "pg_query"

- name: "do we deploy a new cluster?"
  set_fact:
    pg_new_cluster: "{{ (pg_query.resources | length) == 0 }}"

- name: "include storage provider specific tasks"
  when: "pg_backup or pg_clone"
  include_tasks: "{{ pg_storage_provider }}_storage.yml"

- name: "clone only if clone source is present"
  ansible.builtin.set_fact:
    pg_do_clone: "{{ pg_clone and pg_clone_source_exists }}"

- name: "stop if we are going to overwrite an existing backup with a new db cluster"
  ansible.builtin.assert:
    # we can go on when:
    #  - we are not creating an new cluster
    #  - or we create a new cluster but there is no backup in the target
    #  - or we create a new cluster and there is a backup in the target
    #    but we are cloning from the same location
    that: "(not pg_new_cluster) or
           (not pg_backup_target_exists) or
           (pg_clone and pg_backup_full_path == pg_clone_full_path)"
    fail_msg: "Stopping here to avoid a backup overwrite:
      There is already a backup in 's3://{{ pg_backup_full_path }}' that we are not clone from."

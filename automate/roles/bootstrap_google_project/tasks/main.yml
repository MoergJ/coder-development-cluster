---
- name: get project number
  shell: gcloud projects describe {{ project_id }} --format='value(projectNumber)'
  register: project_number_result

- name: set project number
  set_fact:
    project_number: "{{ project_number_result.stdout }}"

- name: Enable APIs
  google.cloud.gcp_serviceusage_service:
    name: "{{ item }}"
    project: "{{ project_id }}"
    auth_kind: "application"
    state: present
  loop:
    - compute.googleapis.com
    - container.googleapis.com
    - dns.googleapis.com
    - secretmanager.googleapis.com
    # - cloudresourcemanager.googleapis.com

- name: get info on service accounts
  gcp_iam_service_account_info:
    project: "{{ project_id }}"
    auth_kind: application
  register: serviceaccounts

- name: select account
  set_fact:
    serviceaccount: "{{ serviceaccounts | json_query('resources[?email==`automate@' + project_id + '.iam.gserviceaccount.com`] | [0]') }}"

- name: when service account is missing
  when: not serviceaccount
  block:
    - name: delete key file if service account is missing
      file:
        path: "{{ config_dir }}/google-cloud.json"
        state: absent

    - name: create service account
      google.cloud.gcp_iam_service_account:
        name: "{{ serviceAccountName }}"
        display_name: "Project automation service account"
        project: "{{ project_id }}"
        auth_kind: application
        state: present
      register: serviceaccount

- name: list roles
  shell: |
    gcloud projects get-iam-policy {{ project_id }} \
      --flatten="bindings[].members" \
      --format='table(bindings.role)' \
      --filter="bindings.members:{{ serviceAccountName }}"
  register: roles

- pause:
    prompt: "{{ roles.stdout }}"
    seconds: 1

- name: Assign roles
  shell: "gcloud projects add-iam-policy-binding {{ project_id }} --member=serviceAccount:{{ serviceAccountName }} --role {{ item }}"
  loop:
    - roles/compute.networkAdmin
    - roles/compute.publicIpAdmin
    - roles/compute.securityAdmin
    - roles/container.admin
    - roles/container.clusterAdmin
    - roles/dns.admin
    - roles/secretmanager.admin
    - roles/storage.objectAdmin

- name: grant access for compute engine
  shell: |
    gcloud iam service-accounts add-iam-policy-binding \
    {{ project_number }}-compute@developer.gserviceaccount.com \
    --member='serviceAccount:{{ serviceAccountName }}' --role='roles/editor'

- name: check key file
  stat:
    path: "{{ config_dir }}/google-cloud.json"
  register: keyfile

- name: create a service account key
  when: not keyfile.stat.exists
  google.cloud.gcp_iam_service_account_key:
    service_account: "{{ serviceaccount }}"
    private_key_type: TYPE_GOOGLE_CREDENTIALS_FILE
    path: "{{ config_dir }}/google-cloud.json"
    project: "{{ project_id }}"
    auth_kind: application
    state: present

- name: create a managed zone
  google.cloud.gcp_dns_managed_zone:
    name: "{{ managed_zone }}"
    dns_name: "{{ domain_name }}."
    description: "Managed zone for {{ domain_name }}"
    project: "{{ project_id }}"
    auth_kind: application
    state: present
  register: managed_zone

- name: list bucket
  shell: gsutil ls -p {{ project_id }} gs://{{ bucket_name }} || true
  register: bucket_list

- name: bucket exists?
  set_fact:
    bucket_exists: "{{ not bucket_list.stderr.startswith('BucketNotFoundException') }}"
  changed_when: false

- name: create a bucket
  when: not bucket_exists
  shell: gsutil mb -p {{ project_id }} -l {{ region }} gs://{{ bucket_name }}

- name: print zone info
  pause:
    prompt: |
      ====================================================================================
      Your google project {{ project_id }} is prepared f√ºr coder development clusters.
      DNS info for {{ domain_name }}:
      Point or delegate your domain to these nameservers:
      {{ managed_zone.nameServers | join(' ') }}
      ====================================================================================
    seconds: 1

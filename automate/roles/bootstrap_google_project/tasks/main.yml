---
- name: Enable APIs
  shell: gcloud services enable {{ item }} --project {{ project_id }}
  loop:
    - compute.googleapis.com
    - container.googleapis.com
    - dns.googleapis.com
    - secretmanager.googleapis.com
    # - cloudresourcemanager.googleapis.com

- name: get project number
  shell: gcloud projects describe {{ project_id }} --format='value(projectNumber)'
  register: project_number_result

- name: set project number
  set_fact:
    project_number: "{{ project_number_result.stdout }}"

- name: create service account
  shell: |
    gcloud iam service-accounts create {{ serviceAccountName }} \
    --description="Coder project automation service account" \
    --display-name="Coder project automation service account" \
    --project {{ project_id }} || true
  register: serviceaccount_result

- name: delete key file if service account is new
  when: serviceaccount_result.rc == 0
  file:
    path: "{{ config_dir }}/google-cloud.json"
    state: absent

- name: list roles
  shell: |
    gcloud projects get-iam-policy {{ project_id }} \
      --flatten="bindings[].members" \
      --format='table(bindings.role)' \
      --filter="bindings.members:{{ serviceAccountFullName }}"
  register: roles

- pause:
    prompt: "{{ roles.stdout }}"
    seconds: 1

- name: Assign roles
  shell: "gcloud projects add-iam-policy-binding {{ project_id }} --member=serviceAccount:{{ serviceAccountFullName }} --role {{ item }}"
  loop:
    - roles/compute.networkAdmin
    - roles/compute.publicIpAdmin
    - roles/compute.securityAdmin
    - roles/container.admin
    - roles/container.clusterAdmin
    - roles/dns.admin
    - roles/secretmanager.admin
    - roles/storage.objectAdmin

- name: grant access for compute engine
  shell: |
    gcloud iam service-accounts add-iam-policy-binding --project {{ project_id }} \
    {{ project_number }}-compute@developer.gserviceaccount.com \
    --member='serviceAccount:{{ serviceAccountFullName }}' --role='roles/editor'

- name: check key file
  stat:
    path: "{{ config_dir }}/google-cloud.json"
  register: keyfile

- name: create a service account key
  shell: |
    gcloud iam service-accounts keys create {{ config_dir }}/google-cloud.json \
    --iam-account {{ serviceAccountFullName }} \
    --project {{ project_id }}
  when: not keyfile.stat.exists


- name: list bucket
  shell: gsutil ls -p {{ project_id }} gs://{{ bucket_name }} || true
  register: bucket_list

- name: bucket exists?
  set_fact:
    bucket_exists: "{{ not bucket_list.stderr.startswith('BucketNotFoundException') }}"
  changed_when: false

- name: create a bucket
  when: not bucket_exists
  shell: gsutil mb -p {{ project_id }} -l {{ region }} gs://{{ bucket_name }}

- name: create managed zone
  shell: |
    gcloud dns managed-zones create {{ managed_zone }} \
    --dns-name {{ domain_name }}. \
    --description "Managed zone for {{ domain_name }}" \
    --project {{ project_id }} || true

- name: get zone info
  shell: |
    gcloud dns managed-zones describe {{ managed_zone }} \
    --project {{ project_id }}
  register: managed_zone_info

- name: print zone info
  pause:
    prompt: |

      Your google project {{ project_id }} is prepared f√ºr coder development clusters.

      DNS zone info:
      {{ managed_zone_info.stdout }}

      *******************************************************************
      ** Point or delegate your domain to the nameservers of the zone. **
      *******************************************************************
    seconds: 1

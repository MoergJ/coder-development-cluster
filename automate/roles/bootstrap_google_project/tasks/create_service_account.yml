---
- name: set full name fact
  set_fact:
    serviceAccountFullName: "{{ item.name }}@{{ project_id }}.iam.gserviceaccount.com"

- name: create service account {{ item.name }}
  shell: |
    gcloud iam service-accounts create {{ item.name }} \
    --description="Coder project automation service account" \
    --display-name="Coder project automation service account" \
    --project {{ project_id }} || true
  register: serviceaccount_result

- name: delete key file if service account {{ item.name }} is new
  when: serviceaccount_result.rc == 0
  file:
    path: "{{ config_dir }}/google-{{ item.name }}.json"
    state: absent

- name: list roles of {{ item.name }}
  shell: |
    gcloud projects get-iam-policy {{ project_id }} \
      --flatten="bindings[].members" \
      --format='table(bindings.role)' \
      --filter="bindings.members:{{ serviceAccountFullName }}"
  register: roles

- pause:
    prompt: "{{ roles.stdout }}"
    seconds: 1

- name: Assign roles to {{ item.name }}
  shell: "gcloud projects add-iam-policy-binding {{ project_id }} --member=serviceAccount:{{ serviceAccountFullName }} --role {{ item }}"
  loop: "{{ item.roles }}"

- name: check key file
  stat:
    path: "{{ config_dir }}/google-{{ item.name }}.json"
  register: keyfile

- name: create a service account key
  shell: |
    gcloud iam service-accounts keys create {{ config_dir }}/google-{{ item.name }}.json \
    --iam-account {{ serviceAccountFullName }} \
    --project {{ project_id }}
  when: not keyfile.stat.exists
